package org.msc.flohmarktauswertung.prog;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.JOptionPane;



public class Database {
	private Statement statement;
	private static Database dbStatic=null;;
	private Connection connection;
	public Database(String dbPath, String dbName) throws Exception {

		String url = "jdbc:hsqldb:"+dbPath +"/"+ dbName;
		System.out.println("Database URL: "+url);
		try {
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			connection = DriverManager.getConnection(url, "SA", "");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			JOptionPane.showMessageDialog(null, "Die Datenbank konnte nicht ge√∂ffnet werden.");
			e.printStackTrace();
			System.exit(200);
		}
	}
	public boolean makeDatabase() throws SQLException {
		String table1="CREATE TABLE items ( id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1), sellerId INTEGER, price DOUBLE, time BIGINT, cashier VARCHAR(100));";
		String table2="CREATE TABLE fileregister ( id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1), filehash VARCHAR (32));";
//		String query = "INSERT INTO items (sellerId, price) VALUES(2, 3.2)";
		executeQuery(table1);
		executeQuery(table2);
//		executeQuery(query);
		return true; 
	}
	public boolean emptyDatabase() throws SQLException {
		String query ="TRUNCATE TABLE items";
		executeQuery(query);
		query = "TRUNCATE TABLE fileregister";
		executeQuery(query);
		return true;
	}
	public synchronized void executeQuery(String expression) throws SQLException {
		statement = null; // The variable statement is initialized and set null.
		ResultSet result = null; // The variable result is initialized and set null. The type ResultSet contains the result of the database search.
		statement = this.connection.createStatement(); // Creates a statement that is used to send a request to the database.
		statement.executeUpdate(expression); // This is what we get back from the database.
		statement.close(); // The result is released thus saving database resources.
	}
	public void saveItem(Item i) {
//		System.out.println("Saving Item: "+i);
		String query="INSERT INTO items (sellerId, price, time, cashier) VALUES("+i.getId()+", "+i.getPrice()+", "+i.getTime()+", '"+i.getCashier()+"')";
		statement = null;
		try {
			statement = connection.createStatement();
			
			statement.executeUpdate(query);
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public void test() throws SQLException {
		Statement statement = null;
		ResultSet result = null;
		statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		String query="SELECT * FROM items";
		result = statement.executeQuery(query);
		while(result.next()) {
			System.out.println(new Item(result.getInt("sellerId"), result.getDouble("price")).toString());
			
		}
		statement.close();
		
	}
	public int[] getSellerIds() throws SQLException {
		statement = null;
		ResultSet result = null;
		statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		String query = "SELECT DISTINCT sellerId FROM items";
		result = statement.executeQuery(query);
		result.last();
		int[] sellerIds = new int[result.getRow()];
		result.beforeFirst();
		int i=0;
		while(result.next()) {
			sellerIds[i]=result.getInt("sellerId");
//			System.out.println("Seller ID: "+sellerIds[i]);
			i++;
		}
		return sellerIds;
	}
	public Seller[] getSellers() throws SQLException {
		statement = null;
		ResultSet result = null;
		statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		String query = "SELECT DISTINCT sellerId FROM items";
		result = statement.executeQuery(query);
		result.last();
		Seller[] sellers = new Seller[result.getRow()];
		result.beforeFirst();
		int i=0;
		while(result.next()) {
			sellers[i]=new Seller(result.getInt("sellerId"));
//			System.out.println("Seller ID: "+sellerIds[i]);
			i++;
		}
		return sellers;
	}
	public double[] getFigures(int id) {
		statement = null;
		ResultSet result = null;
		double[] figures=null;
		try {
			statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			String query = "SELECT price FROM items WHERE sellerId="+id;
//			System.out.println(query);
			result = statement.executeQuery(query);
			result.last();
			figures = new double[result.getRow()];
			result.beforeFirst();
			int i=0;
			while(result.next()) {
				figures[i]=result.getDouble("price");
//				System.out.println("Figures: "+figures[i]);
				i++;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*for (int i = 0; i < figures.length; i++) {
			System.out.println("Figure: "+figures[i]);
		}*/
		return figures;
	}
	public Item[] getItems(int id) {
		statement = null;
		ResultSet result = null;
		Item[] items=null;
		try {
			statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			String query = "SELECT * FROM items WHERE sellerId="+id;
//			System.out.println(query);
			result = statement.executeQuery(query);
			result.last();
			items = new Item[result.getRow()];
			result.beforeFirst();
			int i=0;
			while(result.next()) {
				items[i]=new Item(result.getInt("sellerId"), result.getDouble("price"), result.getLong("time"), result.getString("cashier"));
				i++;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return items;
	}
	public String[] getCashiers(int id) {
		statement = null;
		ResultSet result = null;
		String[] items=null;
		try {
			statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			String query = "SELECT DISTINCT cashier FROM items WHERE sellerId="+id;
//			System.out.println(query);
			result = statement.executeQuery(query);
			result.last();
			items = new String[result.getRow()];
			result.beforeFirst();
			int i=0;
			while(result.next()) {
				items[i]=result.getString("cashier");
				i++;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return items;
	}
	public void saveFileHash(String hash) {
		String query="INSERT INTO fileregister (filehash) VALUES('"+hash+"')";
		statement = null;
		try {
			statement = connection.createStatement();
			statement.executeUpdate(query);
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public String[] getFileHashes()  {
		Statement statement = null;
		ResultSet result = null;
		String[] hashes=null;
		try {
			statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			String query="SELECT * FROM fileregister";
			result = statement.executeQuery(query);
			result.last();
			hashes = new String[result.getRow()];
			result.beforeFirst();
			int i = 0;
			while(result.next()) {
				hashes[i] = result.getString("filehash");
				i++;
			}
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return hashes;
	}
	public void shutdown() {
		try {
			executeQuery("shutdown");
			connection.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public String getDatabaseDump() {
		statement = null;
		ResultSet result = null;
		String dump = "id;Anbieter;Preis;Timestamp;Kasse\n";
		try {
			statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			String query="SELECT * FROM items";
			result = statement.executeQuery(query);
			while(result.next()) {
				dump += result.getInt(1) + ";" + result.getInt(2) + ";" + result.getDouble(3) + ";" + result.getLong(4) + ";" + result.getString(5) + "\n";
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return dump;
	}
}
